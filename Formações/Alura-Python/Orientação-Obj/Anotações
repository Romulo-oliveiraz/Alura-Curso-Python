##############################################################################################################################
# PYTOHN - ANVANÇANDO NA ORIENTAÇÃO A OBJETOS - CURSO ALURA
##############################################################################################################################

# PYTHON DATA MODEL - Protocolos:
# INICIALIZAÇÃO: __init__ : inicialização de um objeto -> obj = novo()

# REPRESENTAÇÃO: __str__ : representa em forma de string para exibir ao usuario final -> str(objeto)
#               __repr__ : utiliza-se para exibir o objeto ao progamador usada pelo console do python -> repr(objeto)

# CONTAINER, SEQUENCIA: __contains__ : verifica se o elemento existe na sequencia
#                       __len__ : retorna o tamanho da sequencia -> len(objeto)
#                       __getitem__ : retorna o elemento da sequencia a partir de um indice
#                       __setitem__ : altera o elemento da sequencia a partir de um indice
#                       __delitem__ : deleta o elemento da sequencia a partir de um indice
#                       __iter__ : retorna um iterador para a sequencia
#                       ex: item in obj, for i in obj, obj[2:3]

# NÚMEIRICOS: __add__ : soma dois números
#             __sub__ : subtrai dois números
#             __mul__ : multiplica dois números
#             __truediv__ : divide dois números
#             __mod__ : retorna o resto da divisão dois números
#             ex: obj1 + obj2, obj1 - obj2, obj1 * obj2, obj1 / obj2, obj1 % obj2 

# COMPOSIÇÃO: "TEM EM" , diminui o acoplamento entre classes
# HEXTENSÃO: "É UM", aumenta o acoplamento entre classes

##############################################################################################################################

# Os mixins são classes herdadas que não precisam ser instanciadas e contém preocupações comuns a diversas classes.

# Podemos usar composição para substituir herança como boa prática de orientação a objetos.

##############################################################################################################################

###################################
# COMO COMPARAR OBJETOS COM PYTHON!
###################################

# Rich Comparison: 
# __eq__(), chamado pelo operador ==
# __ne__(), chamado pelo operador !=
# __gt__(), chamado pelo operador >
# __lt__(), chamado pelo operador <
# __ge__(), chamado pelo operador >=
# __le__(), chamado pelo operador <=

##############################################################################################################################
# + SOBRE O DATETIME
####################

# Esses códigos são definidos pela documentação do strftime(3). Os usados em nossos exemplos são:
# %d/%m/%Y %H:%M: Formatação de data e hórario!
# %d - O dia do mês representado por um número decimal (de 01 a 31)
# %m - O mês representado por um número decimal (de 01 a 12)
# %Y - O ano representado por um número decimal incluindo o século
# %H - A hora representada por um número decimal usando um relógio de 24 horas (de 00 a 23)
# %M - O minuto representado por um número decimal (de 00 a 59)

##############################################################################################################################
