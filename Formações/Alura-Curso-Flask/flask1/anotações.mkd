# <!-- Utiliza o {% for <codigo> %} -->
# <!-- {% endfor %} para fechar o comando -->

> Para utilizar comandos em strings no html pode se usar assim:

<h1>{{  titulo|title  }}</h1> - para deixar todas as primeiras letras maiusculas ou utilizar outros filtros como:

upper: colocar os caracteres em caixa alta;
round: arredondar números;
trim: remover espaços do início e do fim do texto;
default('texto exibido por padrão') - quando queremos mostrar algo, caso a variável esteja vazia ou nula.

> Tipos de Delimitadores do Jinja2:
{%....%}: usado para inserir estruturas Python dentro de um arquivo html;
{{....}}: usado para facilitar a exibição de código python como um output em um template HTML. Alternativa: {% print(....) %};
{#....#}: usado para adicionar comentários que não serão exibidos no output do template HTML.

> URL_FOR:
url_for("<pasta inicial do arq css, filename='<o arquivo a ser encontrado>'>") - vai buscar a pasta e depois o arquivo.
Tambem muito usado para boas praticas ja que ele busca o local da rota não pelo nome dela mas sim pela função.

> Para inserir o template no arquivo html:
% extends "template.html" %
% block conteudo %
    <CODIGO HTML>
% endblock %

> guardar informaçoes nos cookies do navegador:
session[<nome p/ array>] = request.form['<alguma que do html>']
Para utilizar o session é necessario o uso da func app.secret_key = '<name of the key> logo apos a inicialização do app'

> PopUps NO FLASK:
flash('<menssagem>') = mostra uma especie de popup na pagina.

> PARA UTILIZAR O FLASH PARA POPUPS É NECESSARIO INSERIR ESSE COMANDO NO HTML DA PAGINA LOGO APOS O CONTAINER
{% with messages = get_flashed_messages() %}
    {% if messages %} 
        <ul id="messages" class="list-unstyled">
        {% for message in messages %}
            <li class="alert alert-success">{{ message }}</li>
        {% endfor %}
        </ul>
    {% endif %}
{% endwith %}

> Querry String:
query string - é utilizado para mandar uma informação pelo url
para pegar o argumento que a querry string carrega se usa <nome_var> = request.args.get('<nome da QuerryString>')

> RENDER_TEMPLATE:
O render_template importa um template html, com ele é possivel inserir uma variavel no arquivo html utilizando {{<variavel>}} e atribuir um valor.
EX. render_template("lista.html", titulo='Jogos', jogos=lista)

> REQUEST:
O request.form() é a função do flask para capturar as informações recebidas do formulario na rota.
<var> = request.form['<key do formulario>']
EX. nome = request.form['nome']

> REDIRECT:
O redirect(<rota>) redireciona para outra rota,

> APP.RUN:

inicia o app
É possivel definir um host e uma porta na hora de iniciar
ex: app.run(host='0.0.0.0', port=8080)