>Python Collections parte 1: listas e tuplas
# lista:

    É uma sequencia de elementos que é de acesso aleatorio.
    É uma sequencia mutavel.
    Começa a contagem dos elementos a partir do 0
    Para acessar algum elemento pode se usar: <NOME_DA_LISTA>[<pos_do_elemento>]
    Adc elemento se usa <NOME_DA_LISTA>.append[<ELEMENTO>] obs. adc no fim da lista
    Remv elemento se usa <NOME_DA_LISTA>.remove[<ELEMENTO>] obs. remove somente o primeiro elemento q aparece.
    limpa os elementos da lista <NOME_DA_LISTA>.clear()
    <NOME_DA_LISTA>.clear(<Posição>, <ELEMENTO>)
    <NOME_DA_LISTA>.extend(<outra_lista>): mescla um lista com a outra, ex idades.extend([12,31])
# tupla:

É uma sequencia imutavel
    variação funcional:
        Se for preciso mudar algo na tupla, se faz uma func q criar uma nova tupla com o valor alterado e apos isso é necessario atribuir essa tupla para a variavel.
    indicado ao utilizar valores q serão fixos.
    Pode referenciar Objetos, não afetando a modificação de dados deles.
# NumPY

    Evite usar array puro pois para trabalhar com numeros é recomendavel ->
    -> usar o NumPY para trabalhar com arrays, pois ele é mais rapido e eficiente.

np.array([<numeros>]): cria um array com os numeros
    EX D ARRAYS:
>ARRAY PURO, NELE É PRECISO DEFINIR O TIPO Q SÃO OS ELEMENTOS
    import array as arr
    print(arr.array('d', [1, 3.5]))
>ARRAY NUMPY, UTILIZADO PARA TRABALHAR ESPECIALMENTE COM NUMEROS
    import numpy as np
    numeros = np.array([1, 3.5]) + 3 # soma 3 a cada elemento
    print(numeros)

# Abstract method
    é mais usado pois mostra o erro ao tentar instanciar
    e não quando for executar a função!

    É um decorator, dizendo que é um método abstrato, 
    um @abstractmethod. Então, eu não estou implementando.
    Para importar: from abc import ABCMeta, abstractmethod. 
    Usamos o ABCmeta como uma meta classe, metaclass. 
    É uma configuração que precisamos colocar: class <NOME_DA_CLASSE>(metaclass=ABCMeta)

# Isinstance:
    isinstance(<OBJETO>, <TIPO>): retorna True se o objeto for do tipo especificado, False caso contrario.

# Sorted e Reversed
> NÃO AFETA A LISTA.
   sorted(<LISTA>) ordena todos os elementos da lista do menor p/ o maior
   reversed(<LISTA>) bota a ordem dos elementos de tras para frente.
> Sorted com uma lista de objetos:
    sorted(<LISTA>, key = <OBJ>.<GETTER>)
    sorted(<LISTA>, key = <OBJ>.<GETTER>, reverse=True)
>  ou para botar em ordem de valor:
   sorted(<LISTA>, reverse=True) no caso ele coloca na ordem os elementos do maior p/ o menor
   lista com objs = sorted(<LISTA>, key=<ALGO DO OBJ PARA SER COMPARADO>):
>Para alterar na lista se usa 
    <LISTA>.sort() coloca a lista em ordem crescente
    <LISTA>.sort(reverse=True) coloca a lista em ordem crescente
    <LISTA>.reverse() bota a ordem dos elementos de tras para frente.
>Ordernar objs 
    __lt__(self, outro): é necessario adc este methodo caso queira ordenar uma lista com objetos
    functools total_ordering: dá para classe outras comparações no caso <= >= necessitando apenas adc os methodos eq e lt
############################################################################################################################
> Python Collections parte 2: listas e tuplas
    <NOME_NOVA_LISTA> = <LISTA>.copy() = copia uma lista.
> conjuntos:
    São mutaveis.
    se utiliza a função set, neles não há elementos repetidos!

    set(<INTERAVEL>) ou {<ELEMENTOS>}

    Caso a ordem dos elementos não importe o uso dos conjuntos pode ser indicado,
    pois diferente da lista ele n tem um acesso aleatorio e nem posição definida para os elementos.

    <CONJUNTO> | <CONJUNTO> -> O sinal '|', siginifica OU e funciona como um extend, ou seja junta os dois conjuntos.

    <CONJUNTO> & <CONJUNTO> -> O sinal '&', verifica  os dois conjuntos e procura a intersseção entre eles.

    <CONJUNTO> - <CONJUNTO> -> O sinal '-', busca elementos q estão no 1 conjunto mas não estão no 2 conjunto.

    <CONJUNTO> ^ <CONJUNTO> -> o sinal '^', busca os elementos que estão somente em 1 dos conjuntos.

    <CONJUNTO>.add(<ELEMENTO>) -> adc um elemento dentro do conjunto.

    <NEW_CONJUNTO> = frozenset(<CONJUNTO>) -> faz com que o novo conjunto se torne um conjunto imutavel.

> dicionario
    from collections import defaultdict -> trabalhar com um dict com valor fixo.
    <NOME_VARIAVEL> = {<CHAVE>:<VALOR>} -> Cria um dict e adc ele na variavel
    <NOME_VARIAVEL>[<"CHAVE">] -> retorna o valor referente a chave.
    <NOME_VARIAVEL>[<"CHAVE">, <ALGUM_VALOR>] -> Caso não há esta chave retorna algm valor definido.
    <NOME_VARIAVEL>[<"CHAVE">] = <VALOR> -> Muda o valor da chave selecionado para o valor inserido.
    del <NOME_VARIAVEL>[<"CHAVE">] = apaga a chave selecionada.
    for <VAR> in <NOME_DICT>.values() -> roda pelos valores do dict
    for <VAR> in <NOME_DICT>.keys() -> roda pelas chaves do dict
    for <VAR_KEY>, <VAR_VALUES> in <NOME_DICT>: -> roda pelas chaves e valores ao mesmo tempo colocando as chaves na <VAR_KEY> e os valores na <VAR_VALUES>.